/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package myStack;

import java.util.Scanner;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author bkorp1
 */
public class complexTest {

    @Test
    public void testSetcomplex() {
        
        /** jUnit Test Data for class Complex method setComplex( String word )
        Where word is: i, -i, R, -R, -Ii, Ii, R+Ii, R-Ii, -R-Ii, -R+Ii;  R and I are double,
        */
        String[] testData = { /*input strings for setComplex( String word ) */
        "-9.82-5.55i", "-5.55+7.30i", "7.30+5.95i", "5.95+4.64i", "4.64+3.41i", 
        "3.41-2.57i", "-2.57+6.97i", "6.97+7.29i", "7.29+8.01i", "8.01+2.71i", 
        "2.71+5.45i", "5.45-2.89i", "-2.89+4.70i", "4.70+4.48i", "4.48-2.15i", 
        "-2.15+2.62i", "2.62+4.03i", "4.03-3.24i", "-3.24-0.66i", "-0.66+1.32i", 
        "1.32+9.15i", "9.15+2.31i", "2.31-3.23i", "-3.23+5.98i",
        "111.123+13415.1i", "54665243.0-431643.354i",
         "3.0", "-4.5",  "5", "6", 
        /* current RegEXP  given in lab should work on all above data, 
           to handle i, Ii, -i +i, write a RegEXP that looks for only Ii, i, -i,
           You will set real to 0, and imaginary to word. Next,
           you will then have to modify your current grouping, to extract lengths of 2 for imaginary,
           e.g.,  2+i, 2-i; note you can also create just one line REGEXP with an Or statement */
        "10.15i", "-2.3i",    "i",   "-i",
        "-2i",   "2+i",  "1+1i", "1-i", "+i"
        };
        
        Double[][] expResults = { /* stored douible values of real and complex from string above */
         { -9.82,-5.55 },{ -5.55,7.30 },  { 7.30,5.95 },  { 5.95,4.64 },   { 4.64,3.41 }, 
         { 3.41,-2.57 }, { -2.57,6.97 },  { 6.97,7.29 },  { 7.29,8.01 },   { 8.01,2.71 }, 
         { 2.71,5.45 },  { 5.45,-2.89 },  { -2.89,4.70 }, { 4.70,4.48 },   { 4.48,-2.15 }, 
         { -2.15,2.62 }, { 2.62,4.03 },   { 4.03,-3.24 }, { -3.24,-0.66 }, { -0.66,1.32 }, 
         { 1.32,9.15 },  { 9.15,2.31 },   { 2.31,-3.23 }, { -3.23,5.98 },
         {111.123, 13415.1}, {54665243.0, -431643.354}, 
         { 3.0, 0.0},    { -4.5, 0.0 }, { 5.0, 0.0 },   { 6.0, 0.0 },  
         { 0.0, 10.15},  { 0.0, -2.3 },   {0.0, 1.0 },    {0.0, -1.0 },
         { 0.0, -2.0 },  { 2.0, 1.0 },    {1.0, 1.0 },  {1.0, -1.0 }, {0.0, 1.0}

        };
        
        System.out.println("setcomplex");
        complex instance = new complex();

        for( int j = 0; j < testData.length; j++){
            
            complex result = instance.setMyComplex(testData[j]);
//            System.out.println(testData[j]);
//            System.out.print("expected real: " + expResults[j][0]);
//            System.out.println("\t => " + result.getReal());
//            System.out.print("expected imag: " + expResults[j][1]);
//            System.out.println("\t => " + result.getImaginary() + "\n");
            assertEquals(expResults[j][0], result.getReal(), .001);
            assertEquals(expResults[j][1], result.getImaginary(), .001);
            result.clearNums();
        }
    }

    @Test
    public void testToString(){
        System.out.println("toString");
        
        String[][] toStringTestData = {
            { "0.38+9.17i", "0.38+9.17i" },
            { "0.38+9i", "0.38+9.00i" },
            { "1.0", "1.00" },   
            { "i",   "1.00i" },
            { ".99i", "0.99i" },
            { ".999i", "1.00i" },
            { "0.996", "1.00" },
            { "1.995", "2.00" },
            { "-i", "-1.00i" },
            { "123.123456-1234.4567i", "123.12-1,234.46i" },
            {"1223.2222+12222i", "1,223.22+12,222.00i" }
        };
        
        for(int i = 0; i < toStringTestData.length; i++){
            
            complex instance = new complex();
            instance.setMyComplex(toStringTestData[i][0]);
            String result = instance.toString();
            assertEquals(toStringTestData[i][1], result);
        }
    }
    
    @Test
    public void testReadInput(){
        System.out.println("readInput");
        
        String[] data =
        {
            "badData 2.3--3.0.0i 2.3+2-2i 2..3+3i 2.0+2.3\n" +
            "-1000 -99.99  -0.0099  -0.0543i  -10009", 

            " 3.01+2.19i 2.19-9.74i -9.74-4.91i -4.91+7.28i 7.28-4.65i\n" + 
             "-4.65-0.14i -0.14-9.25i -9.25+4.81i 4.81-7.30i -7.30-0.53i\n" +
             "-0.53+1.48i 1.48+9.56i 9.56-0.28i -0.28-1.59i -1.59+6.63i\n",

             "6.63+7.98i 7.98-8.84i -8.84+2.85i 2.85+4.04i 4.04-3.74i\n" +
             "badData 6..+3i --3+3i 3.0.0+2i 5.0+-0.0.i\n" +
             "-3.74-5.20i -5.20-1.37i -1.37+3.59i 3.59+6.27i "
        }; 
        
          String[] expResults =
          {
            "Unknown Complex word->badData\nUnknown Complex word->2.3--3.0.0i\n" +
            "Unknown Complex word->2.3+2-2i\nUnknown Complex word->2..3+3i\n" +
            "Unknown Complex word->2.0+2.3\n" +
            "-1,000.00\n-99.99\n-0.01\n-0.05i\n-10,009.00\n",

            "3.01+2.19i\n2.19-9.74i\n-9.74-4.91i\n-4.91+7.28i\n7.28-4.65i\n" +
            "-4.65-0.14i\n-0.14-9.25i\n-9.25+4.81i\n4.81-7.30i\n-7.30-0.53i\n" +
            "-0.53+1.48i\n1.48+9.56i\n9.56-0.28i\n-0.28-1.59i\n-1.59+6.63i\n",

            "6.63+7.98i\n7.98-8.84i\n-8.84+2.85i\n2.85+4.04i\n4.04-3.74i\n" +
            "Unknown Complex word->badData\nUnknown Complex word->6..+3i\n" +
            "Unknown Complex word->--3+3i\nUnknown Complex word->3.0.0+2i\n" +
            "Unknown Complex word->5.0+-0.0.i\n" +
            "-3.74-5.20i\n-5.20-1.37i\n-1.37+3.59i\n3.59+6.27i\n"
          };
        
         for(int i = 0; i < data.length; i++){
            complex instance = new complex();
            Scanner input = new Scanner(data[i]);
            String result = instance.readInput(input, false);
            assertEquals(expResults[i],result);
         }
    }
    
    @Test
    public void plusTest(){
        System.out.println("plus");
        int j = 0;
                
        /**
        Test Data for Complex methods plus, minus and muliply
        Fields are: input 1, input 2, input1+input2, input1-input2 & input1*input2 
        Each data set has 10 rows, system was tested using a 64 NetBeans/Window 
        tolerances for checking real,imaginary should change every 10 data sets 
        */
        double[] tolerance = { 0.005, 1.5, 0.005, 0.006 }; //0.01; //0.005 for first set
        String[][] testData =
        {
            /** data -100..100 */
            { "0.38+9.17i",	"-9.39+3.14i",	"-9.01+12.31i",	"9.77+6.03i",	"-32.36-84.91i" },
            { "-7.32-8.71i",	"-3.66+7.66i",	"-10.98-1.05i",	"-3.66-16.37i",	"93.51-24.19i" },
            { "-0.22+6.68i",	"-9.44-3.82i",	"-9.66+2.86i",	"9.22+10.50i",	"27.59-62.22i" },
            { "4.29-9.72i",	"-1.23-0.45i",	"3.06-10.17i",	"5.52-9.27i",	"-9.65+10.03i" },
            { "-9.21-9.11i",	"-3.99+4.14i",	"-13.20-4.97i",	"-5.22-13.25i",	"74.46-1.78i" },
            { "-4.88-9.20i",	"4.67+4.53i",	"-0.21-4.67i",	"-9.55-13.73i",	"18.89-65.07i" },
            { "-6.72+2.41i",	"-7.73-8.62i",	"-14.45-6.21i",	"1.01+11.03i",	"72.72+39.30i" },
            { "9.41-7.63i",	"0.56-2.25i",	"9.97-9.88i",	"8.85-5.38i",	"-11.90-25.45i" },
            { "0.74-5.84i",	"-2.86+1.06i",	"-2.12-4.78i",	"3.60-6.90i",	"4.07+17.49i" },
            { "3.16-5.74i",	"-2.31-3.75i",	"0.85-9.49i",	"5.47-1.99i",	"-28.82+1.41i" },
            /** larger data data -1000..1000 */
            { "-131.70-176.02i",	"-159.94-178.19i",	"-291.64-354.21i",	"28.24+2.16i",	"-10301.63+51619.46i" },
            { "-108.75-129.39i",	"-173.29-182.37i",	"-282.05-311.76i",	"64.54+52.99i",	"-4750.70+42255.94i" },
            { "-187.82-153.56i",	"-149.75-101.35i",	"-337.57-254.91i",	"-38.07-52.21i",	"12561.69+42030.87i" },
            { "-133.16-144.56i",	"-149.86-114.85i",	"-283.02-259.42i",	"16.69-29.71i",	"3352.28+36958.04i" },
            { "-100.95-109.95i",	"-162.08-160.37i",	"-263.02-270.32i",	"61.13+50.42i",	"-1271.54+34008.76i" },
            { "-120.96-198.85i",	"-182.98-107.12i",	"-303.95-305.97i",	"62.02-91.72i",	"833.08+49344.15i" },
            { "-185.94-187.91i",	"-161.75-121.99i",	"-347.69-309.90i",	"-24.19-65.92i",	"7152.45+53076.86i" },
            { "-104.52-121.35i",	"-190.80-102.31i",	"-295.32-223.66i",	"86.28-19.04i",	"7527.08+33847.30i" },
            { "-149.95-199.91i",	"-136.33-120.93i",	"-286.28-320.84i",	"-13.63-78.98i",	"-3733.11+45386.58i" },
            { "-158.91-132.32i",	"-110.66-170.70i",	"-269.57-303.02i",	"-48.25+38.38i",	"-5002.19+41767.76i" },
            /** larger data range -125,000 to 125,000 */
            { "-3933.24-3151.72i",	"-2730.09-3267.82i",	"-6663.33-6419.54i",	"-1203.15+116.10i",	"438845.54+21457599.59i" },
            { "-4137.58-3773.78i",	"-3032.54-4412.95i",	"-7170.12-8186.73i",	"-1105.04+639.17i",	"-4106125.60+29703072.46i" },
            { "-4343.77-3632.84i",	"-4487.76-3432.32i",	"-8831.53-7065.16i",	"143.99-200.52i",	"7024727.87+31212522.68i" },
            { "-3899.30-3192.64i",	"-2987.01-3236.12i",	"-6886.31-6428.76i",	"-912.29+43.48i",	"1315481.94+22155050.32i" },
            { "-2906.52-3300.33i",	"-2587.79-3204.23i",	"-5494.31-6504.56i",	"-318.73-96.10i",	"-3053553.01+17853719.55i" },
            { "-2718.23-4140.05i",	"-4069.82-4072.30i",	"-6788.05-8212.35i",	"1351.59-67.75i",	"-5796818.80+27918706.32i" },
            { "-4203.60-4758.29i",	"-4435.73-3166.29i",	"-8639.33-7924.58i",	"232.13-1592.00i",	"3579908.58+34416306.35i" },
            { "-4839.72-2826.32i",	"-3283.65-3067.72i",	"-8123.37-5894.04i",	"-1556.07+241.40i",	"7221588.19+24127551.51i" },
            { "-3689.37-3619.09i",	"-3694.94-3254.26i",	"-7384.31-6873.35i",	"5.57-364.83i",	"1854540.96+25378489.62i" },
            { "-3127.76-2675.97i",	"-2543.72-3144.59i",	"-5671.48-5820.56i",	"-584.04+468.62i",	"-458682.84+16642441.23i" },
            /** either r or i is 0 */
            { "-147.47-109.19i",	"-183.34i",	"-147.47-292.53i",	"-147.47+74.15i",	"-20018.89+27037.15i" },
            { "-190.63-174.89i",	"-106.10i",	"-190.63-280.99i",	"-190.63-68.79i",	"-18555.83+20225.84i" },
            { "-139.42-106.40i",	"-151.81i",	"-139.42-258.21i",	"-139.42+45.41i",	"-16152.58+21165.35i" },
            { "-155.01",	"-167.02-167.82i",	"-322.03-167.82i",	"12.01+167.82i",	"25889.77+26013.78i" },
            { "-119.48",	"-165.32-138.29i",	"-284.80-138.29i",	"45.84+138.29i",	"19752.43+16522.89i" },
            { "-162.50",	"-149.19-137.64i",	"-311.69-137.64i",	"-13.31+137.64i",	"24243.38+22366.50i" },
            { "-151.31",	"-117.31-118.01i",	"-268.62-118.01i",	"-34.00+118.01i",	"17750.18+17856.09i" },
            { "-108.97",	"-183.67-145.14i",	"-292.64-145.14i",	"74.70+145.14i",	"20014.52+15815.91i" },
            { "-195.03",	"-174.58-149.43i",	"-369.61-149.43i",	"-20.45+149.43i",	"34048.34+29143.33i" },
            { "-122.55-189.40i",	"-141.19i",	"-122.55-330.59i",	"-122.55-48.21i",	"-26741.39+17302.83i" },
       };
        
        complex num1 = new complex();
        complex num2 = new complex();
        complex result;
        complex expected;
        System.out.println(testData.length);
        //instantiate both numbers from the test data
        
        for(int i = 0; i < testData.length; i++){
            
            if(i %10 == 0 && i != 0)
                j++;
            

            /*
            NOTE:
            testData[i][0] = num1
            testData[i][1] = num1
            testData[i][2] = num1 + num2
            testData[i][3] = num1 - num2
            testData[i][4] = num1 * num2
            */
            num1.setMyComplex(testData[i][0]);
            num2.setMyComplex(testData[i][1]);
            
            //addition test - tests the plus() method
            result = num1.plus(num2);
            expected = new complex(testData[i][2]);
            //test each real and imaginary on its own
            assertEquals(expected.getReal(), result.getReal(), tolerance[j]);
            assertEquals(expected.getImaginary(), result.getImaginary(), tolerance[j]);            
        }
    } //end method
    
    @Test
    public void minusTest(){
        System.out.println("minus");
        int j = 0;
                
        /**
        Test Data for Complex methods plus, minus and muliply
        Fields are: input 1, input 2, input1+input2, input1-input2 & input1*input2 
        Each data set has 10 rows, system was tested using a 64 NetBeans/Window 
        tolerances for checking real,imaginary should change every 10 data sets 
        */
        double[] tolerance = { 0.005, 1.5, 0.005, 0.006 }; //0.01; //0.005 for first set
        String[][] testData =
        {
            /** data -100..100 */
            { "0.38+9.17i",	"-9.39+3.14i",	"-9.01+12.31i",	"9.77+6.03i",	"-32.36-84.91i" },
            { "-7.32-8.71i",	"-3.66+7.66i",	"-10.98-1.05i",	"-3.66-16.37i",	"93.51-24.19i" },
            { "-0.22+6.68i",	"-9.44-3.82i",	"-9.66+2.86i",	"9.22+10.50i",	"27.59-62.22i" },
            { "4.29-9.72i",	"-1.23-0.45i",	"3.06-10.17i",	"5.52-9.27i",	"-9.65+10.03i" },
            { "-9.21-9.11i",	"-3.99+4.14i",	"-13.20-4.97i",	"-5.22-13.25i",	"74.46-1.78i" },
            { "-4.88-9.20i",	"4.67+4.53i",	"-0.21-4.67i",	"-9.55-13.73i",	"18.89-65.07i" },
            { "-6.72+2.41i",	"-7.73-8.62i",	"-14.45-6.21i",	"1.01+11.03i",	"72.72+39.30i" },
            { "9.41-7.63i",	"0.56-2.25i",	"9.97-9.88i",	"8.85-5.38i",	"-11.90-25.45i" },
            { "0.74-5.84i",	"-2.86+1.06i",	"-2.12-4.78i",	"3.60-6.90i",	"4.07+17.49i" },
            { "3.16-5.74i",	"-2.31-3.75i",	"0.85-9.49i",	"5.47-1.99i",	"-28.82+1.41i" },
            /** larger data data -1000..1000 */
            { "-131.70-176.02i",	"-159.94-178.19i",	"-291.64-354.21i",	"28.24+2.16i",	"-10301.63+51619.46i" },
            { "-108.75-129.39i",	"-173.29-182.37i",	"-282.05-311.76i",	"64.54+52.99i",	"-4750.70+42255.94i" },
            { "-187.82-153.56i",	"-149.75-101.35i",	"-337.57-254.91i",	"-38.07-52.21i",	"12561.69+42030.87i" },
            { "-133.16-144.56i",	"-149.86-114.85i",	"-283.02-259.42i",	"16.69-29.71i",	"3352.28+36958.04i" },
            { "-100.95-109.95i",	"-162.08-160.37i",	"-263.02-270.32i",	"61.13+50.42i",	"-1271.54+34008.76i" },
            { "-120.96-198.85i",	"-182.98-107.12i",	"-303.95-305.97i",	"62.02-91.72i",	"833.08+49344.15i" },
            { "-185.94-187.91i",	"-161.75-121.99i",	"-347.69-309.90i",	"-24.19-65.92i",	"7152.45+53076.86i" },
            { "-104.52-121.35i",	"-190.80-102.31i",	"-295.32-223.66i",	"86.28-19.04i",	"7527.08+33847.30i" },
            { "-149.95-199.91i",	"-136.33-120.93i",	"-286.28-320.84i",	"-13.63-78.98i",	"-3733.11+45386.58i" },
            { "-158.91-132.32i",	"-110.66-170.70i",	"-269.57-303.02i",	"-48.25+38.38i",	"-5002.19+41767.76i" },
            /** larger data range -125,000 to 125,000 */
            { "-3933.24-3151.72i",	"-2730.09-3267.82i",	"-6663.33-6419.54i",	"-1203.15+116.10i",	"438845.54+21457599.59i" },
            { "-4137.58-3773.78i",	"-3032.54-4412.95i",	"-7170.12-8186.73i",	"-1105.04+639.17i",	"-4106125.60+29703072.46i" },
            { "-4343.77-3632.84i",	"-4487.76-3432.32i",	"-8831.53-7065.16i",	"143.99-200.52i",	"7024727.87+31212522.68i" },
            { "-3899.30-3192.64i",	"-2987.01-3236.12i",	"-6886.31-6428.76i",	"-912.29+43.48i",	"1315481.94+22155050.32i" },
            { "-2906.52-3300.33i",	"-2587.79-3204.23i",	"-5494.31-6504.56i",	"-318.73-96.10i",	"-3053553.01+17853719.55i" },
            { "-2718.23-4140.05i",	"-4069.82-4072.30i",	"-6788.05-8212.35i",	"1351.59-67.75i",	"-5796818.80+27918706.32i" },
            { "-4203.60-4758.29i",	"-4435.73-3166.29i",	"-8639.33-7924.58i",	"232.13-1592.00i",	"3579908.58+34416306.35i" },
            { "-4839.72-2826.32i",	"-3283.65-3067.72i",	"-8123.37-5894.04i",	"-1556.07+241.40i",	"7221588.19+24127551.51i" },
            { "-3689.37-3619.09i",	"-3694.94-3254.26i",	"-7384.31-6873.35i",	"5.57-364.83i",	"1854540.96+25378489.62i" },
            { "-3127.76-2675.97i",	"-2543.72-3144.59i",	"-5671.48-5820.56i",	"-584.04+468.62i",	"-458682.84+16642441.23i" },
            /** either r or i is 0 */
            { "-147.47-109.19i",	"-183.34i",	"-147.47-292.53i",	"-147.47+74.15i",	"-20018.89+27037.15i" },
            { "-190.63-174.89i",	"-106.10i",	"-190.63-280.99i",	"-190.63-68.79i",	"-18555.83+20225.84i" },
            { "-139.42-106.40i",	"-151.81i",	"-139.42-258.21i",	"-139.42+45.41i",	"-16152.58+21165.35i" },
            { "-155.01",	"-167.02-167.82i",	"-322.03-167.82i",	"12.01+167.82i",	"25889.77+26013.78i" },
            { "-119.48",	"-165.32-138.29i",	"-284.80-138.29i",	"45.84+138.29i",	"19752.43+16522.89i" },
            { "-162.50",	"-149.19-137.64i",	"-311.69-137.64i",	"-13.31+137.64i",	"24243.38+22366.50i" },
            { "-151.31",	"-117.31-118.01i",	"-268.62-118.01i",	"-34.00+118.01i",	"17750.18+17856.09i" },
            { "-108.97",	"-183.67-145.14i",	"-292.64-145.14i",	"74.70+145.14i",	"20014.52+15815.91i" },
            { "-195.03",	"-174.58-149.43i",	"-369.61-149.43i",	"-20.45+149.43i",	"34048.34+29143.33i" },
            { "-122.55-189.40i",	"-141.19i",	"-122.55-330.59i",	"-122.55-48.21i",	"-26741.39+17302.83i" },
       };
        
        complex num1 = new complex();
        complex num2 = new complex();
        complex result;
        complex expected;
        for(int i = 0; i < testData.length; i++){
            
            if(i %10 == 0 && i != 0)
                j++;
            

            /*
            NOTE:
            testData[i][0] = num1
            testData[i][1] = num1
            testData[i][2] = num1 + num2
            testData[i][3] = num1 - num2
            testData[i][4] = num1 * num2
            */
            num1.setMyComplex(testData[i][0]);
            num2.setMyComplex(testData[i][1]);
            
            //addition test - tests the plus() method
            result = num1.minus(num2);
            expected = new complex(testData[i][3]);
            //test each real and imaginary on its own
            assertEquals(expected.getReal(), result.getReal(), tolerance[j]);
            assertEquals(expected.getImaginary(), result.getImaginary(), tolerance[j]);            
        }
    } //end method
    
    @Test
    public void multiplyTest(){
        System.out.println("multiply");
        int j = 0;
                
        /**
        Test Data for Complex methods plus, minus and muliply
        Fields are: input 1, input 2, input1+input2, input1-input2 & input1*input2 
        Each data set has 10 rows, system was tested using a 64 NetBeans/Window 
        tolerances for checking real,imaginary should change every 10 data sets 
        */
        double[] tolerance = { 0.005, 1.5, 0.005, 0.006 }; //0.01; //0.005 for first set
        String[][] testData =
        {
            /** data -100..100 */
            { "0.38+9.17i",	"-9.39+3.14i",	"-9.01+12.31i",	"9.77+6.03i",	"-32.36-84.91i" },
            { "-7.32-8.71i",	"-3.66+7.66i",	"-10.98-1.05i",	"-3.66-16.37i",	"93.51-24.19i" },
            { "-0.22+6.68i",	"-9.44-3.82i",	"-9.66+2.86i",	"9.22+10.50i",	"27.59-62.22i" },
            { "4.29-9.72i",	"-1.23-0.45i",	"3.06-10.17i",	"5.52-9.27i",	"-9.65+10.03i" },
            { "-9.21-9.11i",	"-3.99+4.14i",	"-13.20-4.97i",	"-5.22-13.25i",	"74.46-1.78i" },
            { "-4.88-9.20i",	"4.67+4.53i",	"-0.21-4.67i",	"-9.55-13.73i",	"18.89-65.07i" },
            { "-6.72+2.41i",	"-7.73-8.62i",	"-14.45-6.21i",	"1.01+11.03i",	"72.72+39.30i" },
            { "9.41-7.63i",	"0.56-2.25i",	"9.97-9.88i",	"8.85-5.38i",	"-11.90-25.45i" },
            { "0.74-5.84i",	"-2.86+1.06i",	"-2.12-4.78i",	"3.60-6.90i",	"4.07+17.49i" },
            { "3.16-5.74i",	"-2.31-3.75i",	"0.85-9.49i",	"5.47-1.99i",	"-28.82+1.41i" },
            /** larger data data -1000..1000 */
            { "-131.70-176.02i",	"-159.94-178.19i",	"-291.64-354.21i",	"28.24+2.16i",	"-10301.63+51619.46i" },
            { "-108.75-129.39i",	"-173.29-182.37i",	"-282.05-311.76i",	"64.54+52.99i",	"-4750.70+42255.94i" },
            { "-187.82-153.56i",	"-149.75-101.35i",	"-337.57-254.91i",	"-38.07-52.21i",	"12561.69+42030.87i" },
            { "-133.16-144.56i",	"-149.86-114.85i",	"-283.02-259.42i",	"16.69-29.71i",	"3352.28+36958.04i" },
            { "-100.95-109.95i",	"-162.08-160.37i",	"-263.02-270.32i",	"61.13+50.42i",	"-1271.54+34008.76i" },
            { "-120.96-198.85i",	"-182.98-107.12i",	"-303.95-305.97i",	"62.02-91.72i",	"833.08+49344.15i" },
            { "-185.94-187.91i",	"-161.75-121.99i",	"-347.69-309.90i",	"-24.19-65.92i",	"7152.45+53076.86i" },
            { "-104.52-121.35i",	"-190.80-102.31i",	"-295.32-223.66i",	"86.28-19.04i",	"7527.08+33847.30i" },
            { "-149.95-199.91i",	"-136.33-120.93i",	"-286.28-320.84i",	"-13.63-78.98i",	"-3733.11+45386.58i" },
            { "-158.91-132.32i",	"-110.66-170.70i",	"-269.57-303.02i",	"-48.25+38.38i",	"-5002.19+41767.76i" },
            /** larger data range -125,000 to 125,000 */
            { "-3933.24-3151.72i",	"-2730.09-3267.82i",	"-6663.33-6419.54i",	"-1203.15+116.10i",	"438845.54+21457599.59i" },
            { "-4137.58-3773.78i",	"-3032.54-4412.95i",	"-7170.12-8186.73i",	"-1105.04+639.17i",	"-4106125.60+29703072.46i" },
            { "-4343.77-3632.84i",	"-4487.76-3432.32i",	"-8831.53-7065.16i",	"143.99-200.52i",	"7024727.87+31212522.68i" },
            { "-3899.30-3192.64i",	"-2987.01-3236.12i",	"-6886.31-6428.76i",	"-912.29+43.48i",	"1315481.94+22155050.32i" },
            { "-2906.52-3300.33i",	"-2587.79-3204.23i",	"-5494.31-6504.56i",	"-318.73-96.10i",	"-3053553.01+17853719.55i" },
            { "-2718.23-4140.05i",	"-4069.82-4072.30i",	"-6788.05-8212.35i",	"1351.59-67.75i",	"-5796818.80+27918706.32i" },
            { "-4203.60-4758.29i",	"-4435.73-3166.29i",	"-8639.33-7924.58i",	"232.13-1592.00i",	"3579908.58+34416306.35i" },
            { "-4839.72-2826.32i",	"-3283.65-3067.72i",	"-8123.37-5894.04i",	"-1556.07+241.40i",	"7221588.19+24127551.51i" },
            { "-3689.37-3619.09i",	"-3694.94-3254.26i",	"-7384.31-6873.35i",	"5.57-364.83i",	"1854540.96+25378489.62i" },
            { "-3127.76-2675.97i",	"-2543.72-3144.59i",	"-5671.48-5820.56i",	"-584.04+468.62i",	"-458682.84+16642441.23i" },
            /** either r or i is 0 */
            { "-147.47-109.19i",	"-183.34i",	"-147.47-292.53i",	"-147.47+74.15i",	"-20018.89+27037.15i" },
            { "-190.63-174.89i",	"-106.10i",	"-190.63-280.99i",	"-190.63-68.79i",	"-18555.83+20225.84i" },
            { "-139.42-106.40i",	"-151.81i",	"-139.42-258.21i",	"-139.42+45.41i",	"-16152.58+21165.35i" },
            { "-155.01",	"-167.02-167.82i",	"-322.03-167.82i",	"12.01+167.82i",	"25889.77+26013.78i" },
            { "-119.48",	"-165.32-138.29i",	"-284.80-138.29i",	"45.84+138.29i",	"19752.43+16522.89i" },
            { "-162.50",	"-149.19-137.64i",	"-311.69-137.64i",	"-13.31+137.64i",	"24243.38+22366.50i" },
            { "-151.31",	"-117.31-118.01i",	"-268.62-118.01i",	"-34.00+118.01i",	"17750.18+17856.09i" },
            { "-108.97",	"-183.67-145.14i",	"-292.64-145.14i",	"74.70+145.14i",	"20014.52+15815.91i" },
            { "-195.03",	"-174.58-149.43i",	"-369.61-149.43i",	"-20.45+149.43i",	"34048.34+29143.33i" },
            { "-122.55-189.40i",	"-141.19i",	"-122.55-330.59i",	"-122.55-48.21i",	"-26741.39+17302.83i" },
       };
        
        complex num1 = new complex();
        complex num2 = new complex();
        complex result;
        complex expected;
        for(int i = 0; i < testData.length; i++){
            
            if(i %10 == 0 && i != 0)
                j++;
            

            /*
            NOTE:
            testData[i][0] = num1
            testData[i][1] = num1
            testData[i][2] = num1 + num2
            testData[i][3] = num1 - num2
            testData[i][4] = num1 * num2
            */
            num1.setMyComplex(testData[i][0]);
            num2.setMyComplex(testData[i][1]);
            
            //addition test - tests the plus() method
            result = num1.multiply(num2);
            expected = new complex(testData[i][4]);
            //test each real and imaginary on its own
            assertEquals(expected.getReal(), result.getReal(), tolerance[j]);
            assertEquals(expected.getImaginary(), result.getImaginary(), tolerance[j]);            
        }
    } //end method

}